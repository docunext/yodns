#!/usr/bin/env ruby

require 'rubygems'
require 'lib/yodns'
require 'trollop'
require 'terminal-table/import'

SUB_COMMANDS = %w(zones list records add rm show export)
global_opts = Trollop::options do
  banner <<-EOS
 
 YoDNSConf.com
 =============

Command Line Zonefile management tool

Usage
-----

    yodns zones

    yodns show <zone>
    yodns list [--type] <zone>
    yodns add <zone> <type> <name> <host> [ttl]

where [options] are:
EOS
  opt :dry_run, "Don't actually do anything", :short => "-n"
  opt :verbose, "Increase verbosity", :short => "-v"
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
z = YoDns.new

case cmd
  when "zones"
    #
  when "list"
    cmd_opts = Trollop::options do
      opt :type, "Record type", :default => 'a', :short => '-t'
    end

    z.list_zone_records ARGV.shift, cmd_opts[:type]

  when "add"
    cmd_opts = Trollop::options do
      opt :ttl, "Time-to-live", :default => 14400, :short => '-t'
      opt :save, "Save"
    end

  when "add"
    cmd_opts = Trollop::options do
      opt :ttl, "Time-to-live", :default => 14400, :short => '-t'
      opt :save, "Save"
    end

    ARGV << cmd_opts[:ttl]
    zone = z.add_zone_record ARGV.shift, ARGV.shift, ARGV  
#    puts zone.output
#    File.open(zone.filename, 'w') {|f| f.write(zone.output) }


  when "rm"
    zone = z.load_zone(ARGV.shift)
    puts "Removing #{ARGV.shift}"

  when "show"
    zone = z.load_zone(ARGV.shift)
    puts zone.output
    #puts z.load_zone(ARGV.shift).output

  when "export"
    puts z.load_zone(ARGV.shift).output
  else
    Trollop::die "unknown subcommand #{cmd.inspect}"
  end


if global_opts[:verbose]
  puts "Global options: #{global_opts.inspect}"
  puts "Subcommand: #{cmd.inspect}"
  puts "Subcommand options: #{cmd_opts.inspect}"
  puts "Remaining arguments: #{ARGV.inspect}"
end
